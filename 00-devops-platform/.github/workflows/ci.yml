name: CI & CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    name: Terraform fmt & validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform fmt (check)
        run: terraform fmt -check -recursive
      - name: Terraform init (no backend)
        run: terraform init -backend=false
      - name: Terraform validate
        run: terraform validate

  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v3
      - name: Install ansible-lint
        run: |
          python3 -m pip install --upgrade pip
          pip install ansible ansible-lint
      - name: Lint playbooks
        run: ansible-lint ansible/playbook.yml

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    needs: ansible-lint
    steps:
      - uses: actions/checkout@v3
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.3
      - name: Lint Outline chart
        run: helm lint kubernetes/apps/outline
      - name: Lint monitoring charts
        run: helm lint kubernetes/apps/monitoring

  kubeval:
    name: K8s Manifest Validation
    runs-on: ubuntu-latest
    needs: helm-lint
    steps:
      - uses: actions/checkout@v3
      - name: Kubeval check
        uses: instrumenta/kubeval-action@v2
        with:
          files: |
            kubernetes/**/*.yaml

  deploy-argocd:
    name: Sync ArgoCD Apps
    runs-on: ubuntu-latest
    needs: kubeval
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd \
            https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

     
      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USER }} \
            --password ${{ secrets.ARGOCD_PASS }} \
            --insecure

     
      - name: ArgoCD app sync
        run: |
          argocd app sync app-of-apps \
            --prune \
            --retry

    
      - name: ArgoCD wait
        run: |
          argocd app wait app-of-apps \
            --health \
            --timeout 300

